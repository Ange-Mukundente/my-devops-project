name: Node.js CI/CD and Security Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  # ---------------------------------------------
  # 1. Build, Test, and Scan
  # ---------------------------------------------
  build_test_and_scan:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.sha_short }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies securely
        run: npm ci

      - name: Run automated tests
        run: npm test

      - name: Scan for dependency vulnerabilities with Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: "monitor"

      - name: Set output variables
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ steps.vars.outputs.sha_short }}

  # ---------------------------------------------
  # 2. Deploy to Staging Environment
  # ---------------------------------------------
  deploy_staging:
    needs: build_test_and_scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ needs.build_test_and_scan.outputs.image_tag }}
            docker stop staging-app || true
            docker rm staging-app || true
            docker run -d --restart always \
              -p 80:3000 \
              --name staging-app \
              ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ needs.build_test_and_scan.outputs.image_tag }}

  # ---------------------------------------------
  # 3. Deploy to Production Environment with Manual Approval
  # ---------------------------------------------
  deploy_production:
    needs: build_test_and_scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: "${{ secrets.PRODUCTION_URL }}"

    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ needs.build_test_and_scan.outputs.image_tag }}
            docker stop prod-app || true
            docker rm prod-app || true
            docker run -d --restart always \
              -p 80:3000 \
              --name prod-app \
              ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ needs.build_test_and_scan.outputs.image_tag }}
